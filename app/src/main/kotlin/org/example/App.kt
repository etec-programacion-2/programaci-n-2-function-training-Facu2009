/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

fun main() {
    println("=== Etapa 1: Funciones Básicas ===")
    // TODO: Implementar función calcularPromedio
    val promedio1 = calcularPromedio(7.5, 8.0)
    println("El promedio es: $promedio1")

    // TODO: Implementar función esAprobado
    val nota = 7.0
    val aprobado = esAprobado(nota)
    println("¿Está aprobado? $aprobado")

    println("\n=== Etapa 2: Funciones con Múltiples Parámetros ===")
    // TODO: Implementar función calcularPromedioTresNotas
    val promedioTresNotas = calcularPromedioTresNotas(7.0, 8.0, 9.0)
    println("El promedio de las tres notas es: $promedioTresNotas")

    // TODO: Implementar función obtenerEstadoAlumno
    val estado = obtenerEstadoAlumno("Juan", "Pérez", 7.5)
    println(estado)

    println("\n=== Etapa 3: Funciones con Listas ===")
    // TODO: Implementar función calcularPromedioCurso
    val notas = listOf(7.0, 8.0, 6.5, 9.0, 7.5)
    val promedioCurso = calcularPromedioCurso(notas)
    println("El promedio del curso es: $promedioCurso")

    // TODO: Implementar función obtenerAlumnosAprobados
    val nombres = listOf("Ana", "Juan", "María", "Pedro", "Lucía")
    val notasAlumnos = listOf(7.0, 5.0, 8.0, 6.0, 9.0)
    val aprobados = obtenerAlumnosAprobados(nombres, notasAlumnos)

    println("Alumnos aprobados:")
    for (alumno in aprobados) {
        println(alumno)
    }

    println("\n=== Etapa 4: Funciones Avanzadas ===")
    // TODO: Implementar función generarBoletin
    val materias = listOf("Matemática", "Lengua", "Historia")
    val notasMaterias = listOf(8.0, 7.5, 9.0)
    val boletin = generarBoletin("Juan Pérez", materias, notasMaterias)
    println(boletin)

    // TODO: Implementar funciones de análisis de rendimiento
    println("Estadísticas del curso:")
    println("Promedio: ${calcularPromedioCurso(notas)}")
    println("Nota más alta: ${obtenerNotaMasAlta(notas)}")
    println("Nota más baja: ${obtenerNotaMasBaja(notas)}")
    println("Cantidad de aprobados: ${contarAprobados(notas)}")
}

// TODO: Implementar las siguientes funciones:

// Etapa 1
fun calcularPromedio(nota1: Double, nota2: Double): Double {
    // Implementar aquí
    return (nota1 + nota2) / 2 //SUMA DE LAS DOS NOTAS Y LUEGO DIVIDIDAS DOS
}

fun esAprobado(nota: Double): Boolean {
    // Implementar aquí
    if (nota >= 6.0){
        return true             //SI LA NOTA ES MAYOR O IGUAL A 6 RETORNA TRUE DE LO CONTRARIO RETORNA FALSE
    } else {
        return false 
    }
        
}

// Etapa 2
fun calcularPromedioTresNotas(nota1: Double, nota2: Double, nota3: Double): Double {
    // Implementar aquí
    return (nota1 + nota2 + nota3) / 3 //PROMEDIO DE NOTAS
}

fun obtenerEstadoAlumno(nombre: String, apellido: String, nota: Double): String {
    // Implementar aquí
    if (nota >= 6.0){
        return "El alumno ${nombre} ${apellido} esta aprobado"
    } else {                                                            //SI EL ALUMNO TIENE UNA NOTA MAYOR O IGUAL A 6 ESTA APROBADO Y SI NO, NO
        return "El alumno ${nombre} ${apellido} esta desaprobado"
    }
    
}

// Etapa 3
fun calcularPromedioCurso(notas: List<Double>): Double {
    // Implementar aquí
    var sumatotal = 0.0
    for (total in notas) {
        sumatotal += total
    }                               // SUMA DE LAS NOTAS CON UN FOR Y DPS DIVIDIDAS ENTRE 5

    return sumatotal / 5
}

fun obtenerAlumnosAprobados(nombres: List<String>, notas: List<Double>): List<String> {
    // Implementar aquí
    val aprobados = mutableListOf<String>() // LISTA MUTABLE, OSEA QUE SE PUEDE MODIFICAR

    for ((nombre, nota) in nombres.zip(notas)) {            //CON UN FOR Y LUEGO CON UN IF VERIFICA SI UN ALUMNO ESTA APROBADO O NO
        if (nota >= 6.0) {
            aprobados.add("$nombre - Nota: $nota")          // SE GUARDAN LOS DATOS EN UN LISTA PARA DPS RETORNARLOS EN FORMA DE LISTA
        }
    }
    return aprobados
}

// Etapa 4
fun generarBoletin(nombre: String, materias: List<String>, notas: List<Double>): String {
    // Implementar aquí
    val listovich = mutableListOf<String>()

    for ((materia, nota) in materias.zip(notas)){        // MOSTRAMOS TODOS LOS VALORES MEDIANTE UN FOR 
        listovich.add("$materia: $nota")                // LOS PONEMOS EN LA LISTA
    }

    return "Boletin del $nombre:\n$listovich"          // RETORNA EL NOMBRE CON UN SALTO DE LINEA PARA PONER LA LISTA CON LAS NOTAS
}

fun obtenerNotaMasAlta(notas: List<Double>): Double {
    // Implementar aquí
    var mayor = notas[0]

    for (encontrado in notas){
        if (encontrado > mayor)        // CON UN FOR Y COMPARANDO NOTA CON NOTA PARA ENCONTRAR LA MAOR NOTA
            mayor = encontrado
    }

    return mayor
}

fun obtenerNotaMasBaja(notas: List<Double>): Double {
    // Implementar aquí
    var menor = notas[0]

    for (encontrado in notas){
        if (encontrado < menor)     // CON UN FOR Y COMPARANDO NOTA CON NOTA PARA ENCONTRAR LA MENOR NOTA
            menor = encontrado
    }

    return menor
}

fun contarAprobados(notas: List<Double>): Int {
    // Implementar aquí
    var contador = 0

    for (k in notas){
        if (k >= 6.0){          // CON UNA VARIABLE CONTADOR QUE CUENTA Y COMPARA CON LA CONDICION LOS APROBADOS
            contador ++ 
        }
    }

    return contador
}
